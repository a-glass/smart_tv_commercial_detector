<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>FavoriteActions</key>
	<array/>
	<key>MacroDefaultsVersion</key>
	<integer>102</integer>
	<key>MacroGroups</key>
	<array>
		<dict>
			<key>Activate</key>
			<string>Normal</string>
			<key>AddToMacroPalette</key>
			<false/>
			<key>AddToStatusMenu</key>
			<false/>
			<key>CreationDate</key>
			<real>778966231.110107</real>
			<key>DisplayToggle</key>
			<false/>
			<key>KeyCode</key>
			<integer>32767</integer>
			<key>Macros</key>
			<array>
				<dict>
					<key>Actions</key>
					<array>
						<dict>
							<key>ActionType</key>
							<string>ExecuteAppleScript</string>
							<key>MacroActionType</key>
							<string>ExecuteAppleScript</string>
							<key>Source</key>
							<string>-- Check if the auto-mute system should be running
set systemEnabled to do shell script "defaults read com.football-auto-mute enabled 2>/dev/null || echo 'false'"
if systemEnabled is not "true" then
	return "System disabled"
end if</string>
						</dict>
						<dict>
							<key>ActionType</key>
							<string>ExecuteAppleScript</string>
							<key>MacroActionType</key>
							<string>ExecuteAppleScript</string>
							<key>Source</key>
							<string>-- Get YouTube TV tab information
try
	set channelInfo to do shell script "osascript -l JavaScript -e '
		var chrome = Application(\"Google Chrome\");
		if (chrome.windows.length > 0) {
			var tab = chrome.windows[0].activeTab;
			try {
				var result = tab.execute({javascript: \"
					var channelElement = document.querySelector(\\\".ytlr-guide-entry-text\\\");
					var titleElement = document.querySelector(\\\".watch-title\\\");
					var channel = channelElement ? channelElement.textContent.trim() : \\\"Unknown\\\";
					var title = titleElement ? titleElement.textContent.trim() : \\\"Unknown\\\";
					JSON.stringify({channel: channel, title: title, url: window.location.href});
				\"});
				result;
			} catch (e) {
				JSON.stringify({channel: \\\"Unknown\\\", title: \\\"Unknown\\\", url: tab.url});
			}
		} else {
			JSON.stringify({channel: \\\"Unknown\\\", title: \\\"Unknown\\\", url: \"\"});
		}
	'"
	set variable "ChannelInfo" to channelInfo
on error
	set variable "ChannelInfo" to "{\"channel\": \"Unknown\", \"title\": \"Unknown\", \"url\": \"\"}"
end try</string>
						</dict>
						<dict>
							<key>ActionType</key>
							<string>ScreenCapture</string>
							<key>CaptureType</key>
							<string>Window</string>
							<key>MacroActionType</key>
							<string>ScreenCapture</string>
							<key>Path</key>
							<string>/tmp/football_screenshot_%ExecutionID%.png</string>
							<key>Variable</key>
							<string>ScreenshotPath</string>
							<key>WindowNumber</key>
							<integer>1</integer>
						</dict>
						<dict>
							<key>ActionType</key>
							<string>ExecuteShellScript</string>
							<key>MacroActionType</key>
							<string>ExecuteShellScript</string>
							<key>Source</key>
							<string>#!/bin/bash
cd "/Users/austinglass/football-auto-mute"
source venv/bin/activate

# Get the context and screenshot from Keyboard Maestro variables
CONTEXT="$KMVAR_ChannelInfo"
SCREENSHOT="$KMVAR_ScreenshotPath"

# Run the detection
python3 src/km_helper.py "$SCREENSHOT" "$CONTEXT" 2>&1</string>
							<key>TrimResults</key>
							<true/>
							<key>TrimResultsNew</key>
							<true/>
							<key>UseText</key>
							<true/>
							<key>Variable</key>
							<string>DetectionResult</string>
						</dict>
						<dict>
							<key>ActionType</key>
							<string>ExecuteAppleScript</string>
							<key>MacroActionType</key>
							<string>ExecuteAppleScript</string>
							<key>Source</key>
							<string>-- Get the result from the Python script and log it
set detectionResult to getvariable "DetectionResult"

-- Log to system log for debugging
do shell script "echo '" &amp; (current date) &amp; ": " &amp; detectionResult &amp; "' >> /Users/austinglass/football-auto-mute/logs/km_activity.log"

-- Parse result and show notifications
try
	if detectionResult contains "COMMERCIAL" then
		display notification "Commercial detected - TV muted" with title "Football Auto-Mute"
	else if detectionResult contains "GAME" then
		display notification "Game content - TV unmuted" with title "Football Auto-Mute"
	else if detectionResult contains "error" then
		display notification "Detection error: " &amp; detectionResult with title "Football Auto-Mute"
	end if
on error errMsg
	display notification "Script error: " &amp; errMsg with title "Football Auto-Mute"
end try</string>
						</dict>
					</array>
					<key>CreationDate</key>
					<real>778966231.110107</real>
					<key>IsActive</key>
					<true/>
					<key>ModificationDate</key>
					<real>778966231.110107</real>
					<key>Name</key>
					<string>Football Auto-Mute Detection</string>
					<key>Triggers</key>
					<array>
						<dict>
							<key>FireType</key>
							<string>Pressed</string>
							<key>KeyCode</key>
							<integer>3</integer>
							<key>MacroTriggerType</key>
							<string>HotKey</string>
							<key>Modifiers</key>
							<integer>768</integer>
							<key>TriggerType</key>
							<string>HotKey</string>
						</dict>
						<dict>
							<key>MacroTriggerType</key>
							<string>Periodic</string>
							<key>Period</key>
							<real>30</real>
							<key>TriggerType</key>
							<string>Periodic</string>
						</dict>
					</array>
					<key>UID</key>
					<string>3B737252-F36F-46BF-910A-B6057DA70B4F</string>
				</dict>
				<dict>
					<key>Actions</key>
					<array>
						<dict>
							<key>ActionType</key>
							<string>ExecuteShellScript</string>
							<key>MacroActionType</key>
							<string>ExecuteShellScript</string>
							<key>Source</key>
							<string>#!/bin/bash
# Toggle the enabled state
current=$(defaults read com.football-auto-mute enabled 2>/dev/null || echo "false")
if [ "$current" = "true" ]; then
	defaults write com.football-auto-mute enabled false
	echo "Football Auto-Mute System DISABLED"
	osascript -e 'display notification "System disabled" with title "Football Auto-Mute"'
else
	defaults write com.football-auto-mute enabled true
	echo "Football Auto-Mute System ENABLED"
	osascript -e 'display notification "System enabled" with title "Football Auto-Mute"'
fi</string>
							<key>TrimResults</key>
							<true/>
							<key>TrimResultsNew</key>
							<true/>
							<key>UseText</key>
							<true/>
						</dict>
					</array>
					<key>CreationDate</key>
					<real>778966231.110107</real>
					<key>IsActive</key>
					<true/>
					<key>ModificationDate</key>
					<real>778966231.110107</real>
					<key>Name</key>
					<string>Toggle Football Auto-Mute System</string>
					<key>Triggers</key>
					<array>
						<dict>
							<key>FireType</key>
							<string>Pressed</string>
							<key>KeyCode</key>
							<integer>3</integer>
							<key>MacroTriggerType</key>
							<string>HotKey</string>
							<key>Modifiers</key>
							<integer>896</integer>
							<key>TriggerType</key>
							<string>HotKey</string>
						</dict>
					</array>
					<key>UID</key>
					<string>DC908007-0D12-435F-850E-A0F4D0A6986E</string>
				</dict>
			</array>
			<key>Modifiers</key>
			<integer>0</integer>
			<key>Name</key>
			<string>Football AutoMute</string>
			<key>PaletteUnderMouse</key>
			<false/>
			<key>Targeting</key>
			<dict>
				<key>Targeting</key>
				<string>All</string>
				<key>TargetingApps</key>
				<array/>
			</dict>
			<key>ToggleMacroUID</key>
			<string>3B737252-F36F-46BF-910A-B6057DA70B4F</string>
			<key>UID</key>
			<string>3B737252-F36F-46BF-910A-B6057DA70B4F</string>
		</dict>
	</array>
	<key>PreferenceSaveUUID</key>
	<string>4BEA8C4C-50ED-410F-A1C5-116B3C4E1160</string>
	<key>PreferenceSavedDate</key>
	<date>2025-09-07T21:30:00Z</date>
	<key>Version</key>
	<string>11.0.4</string>
</dict>
</plist>